import { Command } from 'commander';
import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';
import { exec as execCb } from 'child_process';
import { promisify } from 'util';

const exec = promisify(execCb);

type CreateOptions = {
  pkgManager?: 'npm' | 'pnpm' | 'yarn' | 'bun';
  skipInstall?: boolean;
  noGit?: boolean;
  dbUrl?: string;
  useAppRouter?: boolean;
  withExample?: boolean;
  noCursor?: boolean;
};

async function ensureDir(directoryPath: string): Promise<void> {
  await fs.mkdir(directoryPath, { recursive: true });
}

async function writeFile(filePath: string, contents: string): Promise<void> {
  await ensureDir(path.dirname(filePath));
  await fs.writeFile(filePath, contents, 'utf8');
}

async function copyDirectory(sourceDir: string, targetDir: string): Promise<void> {
  await ensureDir(targetDir);
  const entries = await fs.readdir(sourceDir, { withFileTypes: true });
  for (const entry of entries) {
    const sourcePath = path.join(sourceDir, entry.name);
    const targetPath = path.join(targetDir, entry.name);
    if (entry.isDirectory()) {
      await copyDirectory(sourcePath, targetPath);
    } else if (entry.isFile()) {
      const content = await fs.readFile(sourcePath);
      await ensureDir(path.dirname(targetPath));
      await fs.writeFile(targetPath, content);
    }
  }
}

function getTemplatesDir(): string {
  const __filename = fileURLToPath(import.meta.url);
  const __dirname = path.dirname(__filename);
  // When built: dist/modules -> dist/templates
  return path.resolve(__dirname, '../templates');
}

function replacePlaceholders(content: string, replacements: Record<string, string>): string {
  return Object.entries(replacements).reduce((acc, [key, value]) => acc.replaceAll(`__${key}__`, value), content);
}

async function copyTemplateAndTweak(templateName: string, targetDir: string, replacements: Record<string, string>): Promise<void> {
  const templateRoot = path.join(getTemplatesDir(), templateName);
  // Walk and replace placeholders in text files
  async function walkAndCopy(src: string, dst: string): Promise<void> {
    const items = await fs.readdir(src, { withFileTypes: true });
    await ensureDir(dst);
    for (const item of items) {
      const s = path.join(src, item.name);
      const d = path.join(dst, item.name.replace('__APP_NAME__', replacements.APP_NAME));
      if (item.isDirectory()) {
        await walkAndCopy(s, d);
      } else {
        const buf = await fs.readFile(s);
        const isText = /\.(json|js|ts|tsx|md|mjs|cjs|gitignore|eslintrc|prettierrc)$/i.test(item.name);
        const out = isText ? replacePlaceholders(buf.toString('utf8'), replacements) : buf.toString('utf8');
        await writeFile(d, out);
      }
    }
  }
  await walkAndCopy(templateRoot, targetDir);
}

async function installDependencies(target: string, pm?: CreateOptions['pkgManager']): Promise<void> {
  const pkgManager = pm ?? 'npm';
  const installCmd =
    pkgManager === 'pnpm' ? 'pnpm install' : pkgManager === 'yarn' ? 'yarn' : pkgManager === 'bun' ? 'bun install' : 'npm install';
  await exec(installCmd, { cwd: target });
}

async function scaffoldCursor(root: string): Promise<void> {
  const cursorDir = path.join(root, '.cursor');
  await ensureDir(cursorDir);
  await writeFile(
    path.join(cursorDir, 'context.json'),
    JSON.stringify({ project: { name: path.basename(root) }, createdAt: new Date().toISOString() }, null, 2)
  );
  await ensureDir(path.join(cursorDir, 'rules'));
}

async function scaffoldReadme(root: string, appName: string): Promise<void> {
  const readme = `# ${appName}\n\nGenerated by boilerplate CLI.\n\n- Run dev: npm run dev\n- Set up env: cp .env.example .env\n`;
  await writeFile(path.join(root, 'README.md'), readme);
}

export const createCommand = new Command('create')
  .argument('<app-name>', 'Name of the app to create')
  .option('--pkg-manager <name>', 'Package manager (npm|pnpm|yarn|bun)')
  .option('--skip-install', 'Skip installing dependencies')
  .option('--no-git', 'Skip git init')
  .option('--db-url <mysql-connection-string>', 'MySQL connection string')
  .option('--use-app-router', 'Use Next.js App Router (default)', true)
  .option('--with-example', 'Include example pages and seed', true)
  .option('--no-cursor', 'Do not scaffold .cursor folder')
  .action(async (appName: string, opts: CreateOptions) => {
    const target = path.resolve(process.cwd(), appName);
    await ensureDir(target);
    // Copy Next.js template
    await copyTemplateAndTweak('next-app', target, { APP_NAME: appName });
    if (!opts.noCursor) {
      await scaffoldCursor(target);
    }
    // Basic .env.example
    await writeFile(path.join(target, '.env.example'), 'DATABASE_URL=\nJWT_SECRET=\n');
    if (!opts.skipInstall) {
      try {
        await installDependencies(target, opts.pkgManager);
      } catch (e) {
        console.warn('Dependency installation failed. You can install manually.');
      }
    }
    console.log(`\nScaffolded ${appName} at ${target}`);
  });


